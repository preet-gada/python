def Valueerror(): try:
x = int (input ("Please enter a number: ")) except ValueError:
print ("Oops! That was no valid number. Try again...")
def Import(): try:
import request except Exception as e:
print (e)
def Ioerror(): try:
file=open("hello.txt",'r') except IOError:
print ("File does not exist")
def Arithmetic(): try:
n=6
x=6/0
except ZeroDivisionError:
print('You have just made an Arithmetic error')
def Keyboard(): try:
x = input()
print ('Try using KeyboardInterrupt') except KeyboardInterrupt:
print ('KeyboardInterrupt exception is caught')

def name(): try:
name = input()
print(nam) except NameError:
print("NameError occurred. Some variable isn't defined.")
class MyError(Exception): def __init__(self, value):
self.value = value
def __str__(self): return(repr(self.value))
def custom(): try:
raise(MyError(3*2)) except MyError as error:
print('A New Exception occurred: ', error.value) finally:
print("The try...except block is finished")
Ioerror() Valueerror() Arithmetic() Import() Keyboard() name() custom()