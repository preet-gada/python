# BSF
N = 6
visited = [False]*N
open_list = set()
close_list = set()
queue = []
parent = [0]*N


def check(arr):
    for i in  arr:
        if i == False:
            return False
    return True

def BFS(arr , goal):
    print(queue)
    while len(queue) != 0:
        print("Open List : ",open_list)
        print("Close List : ",close_list)
        a = queue.pop(0)
        if check(visited):
            return 

        if a == goal:
            print("Element found in the list : ")
            open_list.remove(a)
            close_list.add(a)
            print("Open List : ",open_list)
            print("Close List : ",close_list)

            while(a):
                print(a,end=" ")
                a = parent[a]
            
            return 
        
        for i in range(N):
            if arr[a][i] != 0 and (not visited[i]):
                open_list.add(i)
                visited[i] = True
                parent[i] = a
                queue.append(i)
        open_list.remove(a)
        close_list.add(a)


    
    
    

if __name__ == "__main__":
    arr = [[0, 1, 1, 0, 0, 0],
            [1, 0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0]]
    queue.append(0)
    visited[0] = True
    open_list.add(0)
    BFS(arr,3)

#DFS
open_list = set()
close_list = set()
N = 6
visited = [False] * N
parent = [0]*N

def check(arr):
    flag = True
    for i in arr:
        if i == False:
            flag = False
            return flag
    return flag

def DFS(arr , a , goal):
    print("Open List : ",open_list)
    print("Close List : ",close_list)

    if goal == a:
        print("Element Found in the list")
        print("Path : ")
        open_list.remove(a)
        close_list.add(a)
        while(a):
            print(a , end=" ")
            a = parent[a]
        print(0)
    
        return True
        
    if check(visited):
        return False
    
    for i in range(N):
        if arr[a][i] != 0 and (not visited[i]):
            open_list.discard(a)
            close_list.add(a)   
            open_list.add(i)
            visited[i] = True
            parent[i] = a
            ans = DFS(arr,i,goal)
            if ans:
                return True

    open_list.discard(a)
    close_list.add(a)
    return False



if __name__ == "__main__":
    arr = [[0, 1, 1, 0, 0, 0],
            [1, 0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0]]
    visited[0] = True
    open_list.add(0)

    if DFS(arr,0,2):
        print("OpenList : ",open_list)
        print("CloseList : ",close_list)
    else:
        print("OpenList : ",open_list)
        print("CloseList : ",close_list)
        print("Element not found in the list")
    

    
#DFID
N = 6
visited = [False] * N
parent = [0] * N
open_list = set()
close_list = set()

def check(arr):
    for i in arr:
        if i == False:
            return False
    return True


def DFID(arr,a,goal,currd,maxd):
    print("Open List : ",open_list)
    print("Close List : ",close_list)
    if a == goal:
        print("Element found")
        open_list.remove(a)
        close_list.add(a)
        print("Open List : ",open_list)
        print("Close List : ",close_list)
        
        return True
    if check(visited):
        return False

    if currd == maxd:
        return False
    

    for i in range(N):
        if arr[a][i] != 0 and (not visited[i]):
            open_list.discard(a)
            close_list.add(a)
            open_list.add(i)
            visited[i] = True
            parent[i] = a
            if DFID(arr,i,goal,currd+1,maxd):
                return True 
            
            

    open_list.discard(a)
    close_list.add(a)
    return False


if __name__ == "__main__":
    arr = [[0, 1, 1, 0, 0, 0],
            [1, 0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0]]



    for i in range(4):
        visited = [False] * N
        parent = [0] * N
        open_list = set()
        close_list = set()
        visited[0] = True
        open_list.add(0)
        print("Level ",i)
        DFID(arr,0,10,1,i)
        print()
    #Astar
    def astar(start, stop):
    print("Fdljh")
    open_set = set()
    close_set = set()
    parents = {}
    distance = {}
    distance[start] = 0
    parents[start] = start
    open_set.add(start)

    while len(open_set) > 0:
        
        n = None
        for v in open_set:
            if n == None or distance[n]+heuristic(n) > distance[v]+heuristic(v):
                n=v
        if n == stop or n == None:
            pass

        else:
            for (m , weight) in get_neighbours(n):
                if m not in close_set  and m not in open_set:
                    distance[m] = distance[n] + weight
                    open_set.add(m)
                    parents[m] = n
                else:
                    if distance[m] > distance[n] + weight:
                        distance[m] = distance[n] +weight
                        parents[m] = n
                        if m in close_set:
                            close_set.remove(m)
                            open_set.add(m)
                            
        print("Open set : ",open_set)
        print("Close set : ",close_set)
        print()
        if n == None:
            print("Path not found")
            return None

        if n == stop:
            print("Path found")
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]

            path.append(start)
            path.reverse()
            print("Path : ",path)


            return path

        open_set.remove(n)
        close_set.add(n)


def get_neighbours(n):
    if n in graph_nodes:
        return graph_nodes[n]
    else:
        return None


def heuristic(n):
    H_dist={
        'S':11,
        'B':13,
        'C':7,
        'D':14,
        'E':5,
        'F':10,
        'G':0
    }
    return H_dist[n]


graph_nodes = {
    'S' : [('B',10),('D',9)],
    'C':[('D',8)],
    'B':[('C',7),('E',3)],
    'E':[('G',11)],
    'D':[('E',6),('F',5)],
    'F':[('E',7)]
}

astar('S','G')

#perceptron
import numpy as np

x1 = np.array([1,-2,0,-1],dtype=float)
x2 = np.array([0,1.5,-0.5,1],dtype=float)
x3 = np.array([-1,1,0.5,-1],dtype=float)

d = np.array([-1,-1,1],dtype=float)
W = np.array([1,-1,0,0.5],dtype=float)
c = 0.1
X = np.array([x1,x2,x3],dtype=float)
epoch = 1
for i in range(epoch):
    for j in range(len(X)):
        net = np.dot(X[j] , W)
        if net > 0:
            op = 1
        elif net <= 0:
            op = -1

        error = (d[j] - op)

        nw = c*error*X[j] 
        W += nw

        print(f"Weight {j+1} {W}")
print(f"Final weights : {W}")

#hillclimb
import random
from random import shuffle
def hill_climbing(f, initial_state, max_iterations=2000):
    state = initial_state
    for i in range(max_iterations):
    # generate a random neighboring state
        new_state = generate_neighboring_state(state)
        # move to the neighboring state if it has a lower cost
        print(state)
        print(f(state))

        print(new_state)
        print(f(new_state))
        if f(new_state) < f(state):
            print("flkdjflkjdlkj")
            state = new_state

    return state

def generate_neighboring_state(state):
    # generating the best neighbour
    neighbours = {}
    for i in range(0 , N):
        for j in range(0,N):
            if j != state[i]:
                temp = state.copy()
                temp[i] = j 
                neighbours[(i,j)] = cost(temp)

    best_neighbours = []
    best_h = cost(state)

    for i,h in neighbours.items():
        if h < best_h:
            best_h = h
        if h == best_h:
            best_neighbours.append(i)

    if len(best_neighbours) > 0:
        random_index = random.randint(0,len(best_neighbours)-1)
        state[best_neighbours[random_index][0]] = best_neighbours[random_index][1]

    return state



def cost(state):
    # compute the number of pairs of queens that attack each other
    attacks = 0
    for i in range(len(state)):
        for j in range(i+1, len(state)):
            if state[i] == state[j]:
                attacks += 1
            elif abs(i - j) == abs(state[i] - state[j]):
                attacks += 1
    return attacks
# solve the N Queens problem for N=8
N = 8
initial_state = [random.randint(0, 0) for _ in range(N)]
while cost(initial_state) > 0:
    shuffle(initial_state)
    initial_state = hill_climbing(cost, initial_state)
print(f'Solution: {initial_state}')
print(f'Cost: {cost(initial_state)}')

#genetic
from numpy.random import randint
from numpy.random import rand
import math


def crossover(parent1, parent2, r_cross):
    child1, child2 = parent1.copy(), parent2.copy()
    r = rand()
    point = 0
    if r > r_cross:
        point = randint(1, len(parent1) - 2)
        child1 = parent1[:point] + parent2[point:]
        child2 = parent2[:point] + parent1[point:]
    return child1, child2, point


def mutate(chromosome, r_mut):
    for i in range(len(chromosome)):
        if rand() < r_mut:
            chromosome[i] = 1 - chromosome[i]
    return chromosome


def bin_to_dec(bin):
    decimal = 0
    for i in range(len(bin)):
        decimal += bin[i] * pow(2, 4 - i)
    return decimal


def dec_to_bin(dec):
    binaryVal = []
    while dec > 0:
        binaryVal.append(dec % 2)
        dec = math.floor(dec / 2)
    for _ in range(5 - len(binaryVal)):
        binaryVal.append(0)
    binaryVal = binaryVal[::-1]
    return binaryVal


def fitness_function(x):
    return pow(x, 2)


def genetic_algorithm(iterations, population_size, r_cross, r_mut):
    input = [randint(0, 32) for _ in range(population_size)]
    pop = [dec_to_bin(i) for i in input]
    for generation in range(iterations):
        print(f"\nGeneration : {generation+1}", end="\n\n")
        decimal = [bin_to_dec(i) for i in pop]
        fitness_score = [fitness_function(i) for i in decimal]
        f_by_sum = [
            fitness_score[i] / sum(fitness_score) for i in range(population_size)
        ]
        exp_cnt = [
            fitness_score[i] / (sum(fitness_score) / population_size)
            for i in range(population_size)
        ]
        act_cnt = [round(exp_cnt[i]) for i in range(population_size)]
        print(
            "SELECTION\n\nInitial Population\tDecimal Value\tFitness Score\tFi/Sum\tExpected count\tActual Count"
        )
        for i in range(population_size):
            print(
                pop[i],
                "\t",
                decimal[i],
                "\t\t",
                fitness_score[i],
                "\t\t",
                round(f_by_sum[i], 2),
                "\t\t",
                round(exp_cnt[i], 2),
                "\t\t",
                act_cnt[i],
            )
        print("Sum : ", sum(fitness_score))
        print("Average : ", sum(fitness_score) / population_size)
        print("Maximum : ", max(fitness_score), end="\n")
        max_count = max(act_cnt)
        min_count = min(act_cnt)
        max_count_index = 0
        for i in range(population_size):
            if max_count == act_cnt[i]:
                max_count_index = i
                break
        for i in range(population_size):
            if min_count == act_cnt[i]:
                pop[i] = pop[max_count_index]
        crossover_children = list()
        crossover_point = list()
        for i in range(0, population_size, 2):
            child1, child2, point_of_crossover = crossover(pop[i], pop[i + 1], r_cross)
            crossover_children.append(child1)
            crossover_children.append(child2)
            crossover_point.append(point_of_crossover)
            crossover_point.append(point_of_crossover)
        print(
            "\nCROSS OVER\n\nPopulation\t\tMate\t Crossover Point\t Crossover Population"
        )
        for i in range(population_size):
            if (i + 1) % 2 == 1:
                mate = i + 2
            else:
                mate = i
            print(
                pop[i],
                "\t",
                mate,
                "\t",
                crossover_point[i],
                "\t\t\t",
                crossover_children[i],
            )
        mutation_children = list()
        for i in range(population_size):
            child = crossover_children[i]
            mutation_children.append(mutate(child, r_mut))
        new_population = list()
        new_fitness_score = list()
        for i in mutation_children:
            new_population.append(bin_to_dec(i))
        for i in new_population:
            new_fitness_score.append(fitness_function(i))
        print("\nMUTATION\n\nMutation population\t New Population\t Fitness Score")
        for i in range(population_size):
            print(
                mutation_children[i],
                "\t",
                new_population[i],
                "\t\t",
                new_fitness_score[i],
            )
        print("Sum : ", sum(new_fitness_score))
        print("Maximum : ", max(new_fitness_score))
        pop = mutation_children


genetic_algorithm(iterations=2, population_size=4, r_cross=0.5, r_mut=0.05)

#prolog
female(pragna).
female(dhanvanti).
female(kajal).

male(kevin).
male(harshil).
male(pradeep).
male(premji).

parent(pragna,kevin).
parent(pradeep,kevin).
parent(pragna,harshil).
parent(pradeep,harshil).
parent(dhanvanti,pradeep).
parent(premji,pradeep).
parent(dhanvanti,kajal).
parent(premji,kajal).

mother(X,Y):- parent(X,Y),female(X).
father(X,Y):- parent(X,Y),male(X).
haschild(X):- parent(X,_).
sister(X,Y):- parent(Z,X),parent(Z,Y),female(X),X\==Y.
brother(X,Y):- parent(Z,X),parent(Z,Y),male(X),X\==Y.
grandparent(X,Y):- parent(X,Z),parent(Z,Y).
grandmother(X,Z):- mother(X,Y),parent(Y,Z).
grandfather(X,Z):- father(X,Y),parent(Y,Z).
wife(X,Y):- parent(X,Z),parent(Y,Z),female(X),male(Y).
